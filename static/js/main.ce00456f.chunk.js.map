{"version":3,"sources":["components/FeedbackOptions.js","components/Statistics.js","components/Section.js","components/Notification.js","App.js","index.js"],"names":["Translation","text","FeedbackOptions","options","onIncStats","className","map","option","index","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","defaultProps","Notification","message","Counter","state","props","Math","round","incStats","value","console","log","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","this","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce00456f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FeedbackOptions = ({options, onIncStats }) => (\r\n    <div className=\"Feedback-controls\">\r\n        {options.map((option, index) => {\r\n            return (<button type=\"button\" key={index} onClick={() => onIncStats(option)}>{Translation(option)}</button>)\r\n        })}\r\n    </div>        \r\n);\r\n\r\nfunction Translation(text) {\r\n    if (text === 'good') { return \"Хорошо\" }\r\n    if (text === 'neutral') { return \"Нормально\" }\r\n    if (text === 'bad') { return \"Плохо\" }\r\n};\r\nexport default FeedbackOptions;","import React from 'react';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n    <div>\r\n        <p className=\"Counter-value\">Хорошо: {good}</p>\r\n        <p className=\"Counter-value\">Нормально: {neutral}</p>\r\n        <p className=\"Counter-value\">Плохо: {bad}</p>\r\n        <p className=\"Counter-value\">Вслего голосов: {total}</p>\r\n        <p className=\"Counter-value\">Процент положительных отзывов: {positivePercentage}%</p>\r\n    </div>\r\n);\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n    </div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: \"\",\r\n    children: [],\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Notification = ({message}) => (\r\n    <div className=\"Notification\">\r\n        <p>{message}</p>\r\n    </div>        \r\n);\r\nNotification.defaultProps = {\r\n    message: \"\"\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string\r\n};\r\nexport default Notification;","import './App.css';\nimport React from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nclass Counter extends React.Component {\n    static defaultProps = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: 0,\n        positivePercentage: 0\n    }\n    state = {\n      good: this.props.good,\n      neutral: this.props.neutral,\n      bad: this.props.bad,\n      total: this.props.good + this.props.neutral + this.props.bad,\n      positivePercentage: (this.props.total===0)? 0 : Math.round((this.props.good * 100) / (this.props.good + this.props.neutral + this.props.bad))\n    };\n    incStats = (value) => {\n        console.log(value);\n        this.setState(prevState => {       \n            return {\n                [value]: prevState[value] + 1,\n            };\n        });\n        this.countTotalFeedback();\n    };\n    countTotalFeedback = () => { \n        this.setState(prevState => {\n            return {total : prevState.good+prevState.neutral+prevState.bad,}\n        });\n        this.countPositiveFeedbackPercentage();\n    };\n    countPositiveFeedbackPercentage = () => {\n        this.setState(prevState => {\n            return {positivePercentage: Math.round(prevState.good*100/prevState.total)}\n        });\n    };\n    \n    render() {\n        const { good , neutral , bad , total , positivePercentage } = this.state\n        const options = ['good','neutral','bad'];\n        return (\n            <div className=\"Counter\">\n                <Section title=\"Оставте свой отзыв.\">\n                    <FeedbackOptions\n                    options={options}\n                    onIncStats={this.incStats}\n                    />\n                </Section>\n                <Section title=\"Статистика\">\n                    {total > 0 ? \n                        <Statistics\n                          good={good}\n                          neutral={neutral}\n                          bad={bad}\n                          total={total}\n                          positivePercentage={positivePercentage}\n                        />\n                        :\n                        <Notification message=\"Пока что нет отзывов.\"/>\n                    }\n                </Section>\n                \n            </div>\n        );\n    }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}